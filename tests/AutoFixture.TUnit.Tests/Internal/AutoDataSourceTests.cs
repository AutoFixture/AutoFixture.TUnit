using AutoFixture.Kernel;
using AutoFixture.TUnit.Internal;
using AutoFixture.TUnit.Tests.TestTypes;
using TUnit.Assertions.AssertConditions.Throws;

namespace AutoFixture.TUnit.Tests.Internal;

public class AutoDataSourceTests
{
    [Test]
    public async Task SutIsTestDataSource()
    {
        // Arrange & Act
        var sut = new AutoDataSource(() => new DelegatingFixture());

        // Assert
        await Assert.That(sut).IsAssignableTo<IDataSource>();
    }

    [Test]
    public async Task SetsPropertiesToExpectedValues()
    {
        // Arrange
        var fixtureFactory = () => new DelegatingFixture();
        var source = new DelegatingDataSource();

        // Act
        var sut = new AutoDataSource(fixtureFactory, source);

        // Assert
        await Assert.That<Func<IFixture>>(sut.CreateFixture).IsSameReferenceAs(fixtureFactory);
        await Assert.That(sut.Source).IsSameReferenceAs(source);
    }

    [Test]
    public async Task GeneratesTestDataUsingFixture()
    {
        // Arrange
        var builder = new CompositeSpecimenBuilder(
            new FixedParameterBuilder<string>("a", "value"),
            new FixedParameterBuilder<int>("b", 1),
            new FixedParameterBuilder<double>("c", 12.2));
        var fixture = new DelegatingFixture
        {
            OnCreate = (r, c) => builder.Create(r, c),
        };
        var sut = new AutoDataSource(() => fixture);
        var method = typeof(SampleTestType).GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

        // Act
        var result = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).Select(x => x()).ToArray();

        // Assert
        await Assert.That(result).IsNotNull();
        var item = await Assert.That(result).HasSingleItem();

        await Assert.That(item).IsNotNull();
        await Assert.That(item.Length).IsEqualTo(3);
        await Assert.That(item[0]).IsEqualTo("value");
        await Assert.That(item[1]).IsEqualTo(1);
        await Assert.That(item[2]).IsEqualTo(12.2);
    }

    [Test]
    public async Task CombinesTestDataFromSourceWithAutoGeneratedValues()
    {
        // Arrange
        var source = new DelegatingDataSource
        {
            TestData =
            [
                ["a", 15],
                ["b", 123],
                ["c", 999]
            ],
        };
        var builder = new FixedParameterBuilder<double>("c", 13.3);
        var fixture = new DelegatingFixture
        {
            OnCreate = (r, c) => builder.Create(r, c),
        };
        var sut = new AutoDataSource(() => fixture, source);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

        // Act
        var result = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).ToArray();

        // Assert
        await Assert.That(result).IsNotNull();
        await Assert.That(result.Length).IsEqualTo(3);
        await Assert.That(result[0]).IsEquivalentTo(new object[] { "a", 15, 13.3 });
        await Assert.That(result[1]).IsEquivalentTo(new object[] { "b", 123, 13.3 });
        await Assert.That(result[2]).IsEquivalentTo(new object[] { "c", 999, 13.3 });
    }

    [Test]
    public async Task DoesNotGenerateValuesWhenAllValuesProvidedBySource()
    {
        // Arrange
        var source = new DelegatingDataSource
        {
            TestData =
            [
                ["a", 85, 913.12],
                ["b", 519, 73.1],
                ["c", 411, 529.6]
            ],
        };
        var fixture = new DelegatingFixture
        {
            OnCreate = (_, _) => throw new InvalidOperationException("Fixture should not be called"),
        };
        var sut = new AutoDataSource(() => fixture, source);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

        // Act
        var result = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).ToArray();

        // Assert
        await Assert.That(result).IsNotNull();
        await Assert.That(result.Length).IsEqualTo(3);
        await Assert.That(result[0]).IsEquivalentTo(new object[] { "a", 85, 913.12 });
        await Assert.That(result[1]).IsEquivalentTo(new object[] { "b", 519, 73.1 });
        await Assert.That(result[2]).IsEquivalentTo(new object[] { "c", 411, 529.6 });
    }

    [Test]
    public async Task ReturnsNoTestDataWhenSourceReturnsNoTestData()
    {
        // Arrange
        var source = new DelegatingDataSource
        {
            TestData = Array.Empty<object[]>(),
        };
        var fixture = new DelegatingFixture();
        var sut = new AutoDataSource(() => fixture, source);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

        // Act
        var result = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).ToArray();

        // Assert
        await Assert.That(result).IsEmpty();
    }

    [Test]
    public async Task ThrowsWhenSourceReturnsNull()
    {
        // Arrange
        var source = new DelegatingDataSource { TestData = null };
        var fixture = new DelegatingFixture();
        var sut = new AutoDataSource(() => fixture, source);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

        // Act & Assert
        await Assert.That(() => sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!))
                .ToArray())
            .ThrowsException();
    }

    [Test]
    public async Task DoesNotCustomizeFixtureWhenParametersNotCustomized()
    {
        // Arrange
        var customizations = new List<ICustomization>();
        var fixture = new DelegatingFixture
        {
            OnCustomize = c => customizations.Add(c)
        };
        var sut = new AutoDataSource(() => fixture);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithMultipleParameters));

        // Act
        _ = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).ToArray();

        // Assert
        await Assert.That(customizations).IsEmpty();
    }

    [Test]
    public async Task CustomizesFixtureUsingParameterCustomizations()
    {
        // Arrange
        var customizations = new List<ICustomization>();
        var fixture = new DelegatingFixture
        {
            OnCustomize = c => customizations.Add(c)
        };
        var sut = new AutoDataSource(() => fixture);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithCustomizedParameter));

        // Act
        _ = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).ToArray();

        // Assert
        await Assert.That(customizations).IsNotEmpty();
    }

    [Test]
    public async Task CustomizationsAreAppliedInExpectedOrder()
    {
        // Arrange
        var customizations = new List<ICustomization>();
        var fixture = new DelegatingFixture
        {
            OnCustomize = c => customizations.Add(c)
        };
        var sut = new AutoDataSource(() => fixture);
        var method = typeof(SampleTestType)
            .GetMethod(nameof(SampleTestType.TestMethodWithMultipleCustomizations));

        // Act
        _ = sut.GenerateDataSources(DataGeneratorMetadataHelper.CreateDataGeneratorMetadata(method!)).ToArray();

        // Assert
        using var scope = Assert.Multiple();

        await Assert.That(customizations[0]).IsAssignableTo<FreezeOnMatchCustomization>();
        await Assert.That(customizations[1]).IsAssignableTo<FreezeOnMatchCustomization>();
        var composite = await Assert.That(customizations[2]).IsAssignableTo<CompositeCustomization>();

        var compositeCustomizations = composite.Customizations.ToArray();
        await Assert.That(compositeCustomizations.Length).IsEqualTo(2);
        await Assert.That(compositeCustomizations[0]).IsAssignableTo<ConstructorCustomization>();
        await Assert.That(compositeCustomizations[1]).IsAssignableTo<FreezeOnMatchCustomization>();
    }
}