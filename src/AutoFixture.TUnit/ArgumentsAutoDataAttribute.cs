using System.Diagnostics.CodeAnalysis;
using AutoFixture.TUnit.Internal;

namespace AutoFixture.TUnit;

/// <summary>
/// Provides a data source for a data theory, with the data coming from inline
/// values combined with auto-generated data specimens generated by AutoFixture.
/// </summary>
[SuppressMessage("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes",
    Justification = "This attribute is the root of a potential attribute hierarchy.")]
public class ArgumentsAutoDataAttribute : AutoFixtureDataSourceAttribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ArgumentsAutoDataAttribute" /> class.
    /// </summary>
    /// <param name="values">The data values to pass to the theory.</param>
    public ArgumentsAutoDataAttribute(params object?[] values)
        : this(() => new Fixture(), values)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ArgumentsAutoDataAttribute" /> class.
    /// </summary>
    /// <param name="fixtureFactory">The fixture factory.</param>
    /// <param name="values">The data values to pass to the theory.</param>
    /// <exception cref="ArgumentNullException"></exception>
    protected ArgumentsAutoDataAttribute(Func<IFixture> fixtureFactory, params object?[]? values)
    {
        FixtureFactory = fixtureFactory ?? throw new ArgumentNullException(nameof(fixtureFactory));
        Values = values ?? [null];
    }

    /// <summary>
    /// Gets the fixture factory.
    /// </summary>
    public Func<IFixture> FixtureFactory { get; }

    /// <summary>
    /// Gets the data values to pass to the theory.
    /// </summary>
    public object?[] Values { get; }

    /// <inheritdoc />
    public override IEnumerable<object?[]> GetData(DataGeneratorMetadata dataGeneratorMetadata)
    {
        return new AutoDataSource(FixtureFactory, new InlineDataSource(Values))
            .GenerateDataSources(dataGeneratorMetadata)
            .Select(x => x());
    }
}