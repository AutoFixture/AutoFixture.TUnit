using System.Diagnostics.CodeAnalysis;
using AutoFixture.TUnit.Internal;

namespace AutoFixture.TUnit;

/// <summary>
/// Provides auto-generated data specimens generated by AutoFixture as an extension to
/// xUnit.net's Theory attribute.
/// </summary>
[SuppressMessage("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes",
    Justification = "This attribute is the root of a potential attribute hierarchy.")]
public class AutoDataAttribute : BaseDataSourceAttribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref="AutoDataAttribute" /> class.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This constructor overload initializes the <see cref="Fixture" /> to an instance of
    /// <see cref="Fixture" />.
    /// </para>
    /// </remarks>
    public AutoDataAttribute()
        : this(() => new Fixture())
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="AutoDataAttribute" /> class
    /// with the supplied <paramref name="fixtureFactory" />. Fixture will be created
    /// on demand using the provided factory.
    /// </summary>
    /// <param name="fixtureFactory">The fixture factory used to construct the fixture.</param>
    protected AutoDataAttribute(Func<IFixture> fixtureFactory)
    {
        this.FixtureFactory = fixtureFactory ?? throw new ArgumentNullException(nameof(fixtureFactory));
    }

    /// <summary>
    /// Gets the fixture factory.
    /// </summary>
    public Func<IFixture> FixtureFactory { get; }

    /// <inheritdoc />
    public override IEnumerable<object?[]> GetData(DataGeneratorMetadata dataGeneratorMetadata)
    {
        var source = new AutoDataSource(this.FixtureFactory);

        return source.GenerateDataSources(dataGeneratorMetadata).Select(x => x());
    }
}